#正则表达式的表示类型
#建议：当"正则表达式"包含<转义符>时，使用raw string类型
(1)raw string类型(原生字符串类型)：是不包含转义符的字符串	
表示方法：r'XXXXX'	#XXXX表示正则表达式字符串
(2)string类型

#Re库的另一种等价用法！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！
re.compile(pattern,flag=0)		#作用：将正则表达式的字符串形式编译成正则表达式对象
>>>pat = re.compile(re.sub(r'[1-9]\d{5}')
>>>rst = pat.search('BIT 100081')





#返回match对象需要用if语句进行判断，返回是空时，则不能继续进行
#match.group(0)			#group()用来提出分组截获的字符串,0表示整体

#Re主要功能函数
1、re.search(pattern,string,flags=0)					#在一个字符串中搜索匹配正则表达式的第一个位置，返回match对象
	参数：pattern：正则表达式的字符串或原生字符串表示
		  string：待匹配字符串
		  flags：正则表达式使用时的一些控制标记

2、re.match(pattern,string,flags=0)					#在一个字符串中的开始位置起匹配正则表达式，返回match对象
3、re.findall(pattern,string,flags=0)				#搜索字符串，返回全部能匹配的子串，返回列表类型
4、re.split(pattern,string,maxsplit=0,flags=0)		#将一个字符串按照正则表达式匹配结果进行分割，返回列表类型
	参数：maxsplit：最大分割数，剩余部分作为最后一个元素输出
		范例：re.split(r'[1-9]\d{5}','BIT100081 TSU100084')-->>['BIT','TSU','']			#string中去掉正则表达式中有的部分
5、re.finditer(pattern,string,flags=0)				#搜索字符串，返回一个匹配结果的迭代类型，每个迭代元素是match对象
6、re.sub(pattern,repl,string,count=0,flags=0)		#在一个字符串中替换所有匹配正则表达式的子串，返回替换后的字符串
	参数：repl:替换匹配字符串的字符串
		  count：匹配的最大替换次数
		  范例：re.sub(r'[1-9]\d{5}',':zipcode','BIT100081 TSU100084')-->>'BIT:zipcode TSU:zipcode'





